The display logic needs to accomplish a number of tasks:

- display the main menu and auxiliary menus (needs current menu state as input; should be called after internal state is updated in response to user)

- display the overworld (needs overworld and player state; should be called every time a game action takes place in the overworld)

main function should:
1. receive input
2. call the input function corresponding to current mode of interaction (menu, overworld); input function returns state change
3. change passed to function/procedure that controls the underlying state of the current mode; new state is returned (return may be implicit or explicit)
4. pass new state to display function in order to render

not sure yet if console and display should be grouped differently. don't see a reason they should be separated for now

display function should be in its own thread/process so that rendering happens while inputs are being processed

may be good for input to also be in its own thread so that inputs may buffer behind a semaphor, creating an input buffer (buffer should have input+time so that main can discard outdated inputs)

state folder should contain all definitions used to represent game and menu data
